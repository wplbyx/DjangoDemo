"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'qefh05#yzbul0r2&m=2$v)c1jm0+b55w+uj!+_bi#n!(mq(x6-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'common',
    'system',
    'search',
    'users',
    'posts',
    'links',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'


# ===============================
# REST FRAMEWORK 全局配置

REST_FRAMEWORK = {
    # 自动扫描API，生成API文档
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',

    # 分页配置
    'DEFAULT_PAGINATION_CLASS': 'common.paginator.CustomPagination',
    'PAGE_SIZE': 10,  # 默认每页条数

    # 全局限流策略
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/day',
        'user': '1000/day'
    },

    # 全局权限策略
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ]
}


# # ===================================
# # ElasticSearch 框架配置 搜索，推荐 功能
# ELASTICSEARCH_DSL = {
#     'default': {
#         'hosts': 'localhost:9200'
#     },
# }


# ===============================
# Log 日志配置，由4部分组成: formatters(格式化器), loggers(日志实例) --> handlers(处理器) --> filters(过滤器)
#                      |---> 1. formatter --|
# logger ---> handlers |--->    ...         |---> 记录日志
#                      |---> n. filters ----|
# 日志路径
BASE_LOG_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(BASE_LOG_DIR):
    os.makedirs(BASE_LOG_DIR)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '==> [%(asctime)s] [%(filename)s:%(lineno)d] [%(module)s:%(funcName)s] '
                      '[%(levelname)s]- %(message)s',
        },
        'simple': {
            'format': '%(asctime)s [%(levelname)s] -> %(message)s',
        },
    },
    'filters': {},
    'loggers': {
        'django': {
            'level': 'INFO',
            'handlers': ['console'],
            'propagate': True,
        },
        'django.request': {
            'handlers': ['file'],
            'level': 'WARNING',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'request': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True
        },
        'database': {
            'handlers': ['database', 'console'],
            'level': 'INFO',
            'propagate': True
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            # 'encoding': 'utf-8',  # 设置默认编码，否则打印出来汉字乱码
        },
        'file': {
            'level': 'WARNING',
            'class': 'logging.handlers.TimedRotatingFileHandler',  # 按天分隔日志文件
            'when': 'midnight',  # 凌晨开始分隔日志
            'backupCount': 30,   # 日志保存为30天
            'filename': os.path.join(BASE_LOG_DIR, 'today_log_file.log'),
            'formatter': 'verbose',
            # 'encoding': 'utf-8',
        },
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.TimedRotatingFileHandler',  # 按天分隔日志文件
            'when': 'midnight',  # 凌晨开始分隔日志
            'backupCount': 30,   # 日志保存为30天
            'filename': os.path.join(BASE_LOG_DIR, 'error.log'),
            'formatter': 'verbose',
            # 'encoding': 'utf-8',
        },
        'info': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',  # 按天分隔日志文件
            'when': 'midnight',  # 凌晨开始分隔日志
            'backupCount': 30,   # 日志保存为30天
            'filename': os.path.join(BASE_LOG_DIR, 'info.log'),
            'formatter': 'verbose',
            # 'encoding': 'utf-8',
        },
        'database': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',  # 按天分隔日志文件
            'when': 'midnight',  # 凌晨开始分隔日志
            'backupCount': 30,   # 日志保存为30天
            'filename': os.path.join(BASE_LOG_DIR, 'database.log'),
            'formatter': 'verbose',
        }
    },

}

